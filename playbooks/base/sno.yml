---
# Run it with: ansible-playbook sno.yaml -e "start_install=true"
#
# This playbook prepares an Single Node Openshift (SNO) installation
# Right now the only way to do this is through Agent Based Installation (ABI)

- name: 'Setup Single Node Openshift (SNO) with Agent Based Installation (ABI)'
  hosts:
    - 'lab'

  gather_facts: false

  vars:
    lab_abi: True
    lab_abi_ip: "{{ lab_node_network_base }}31"
    lab_api_ips: ["{{ lab_node_network_base }}31"]
    lab_ingress_ips: ["{{ lab_node_network_base }}31"]
    lab_name: 'sno'
    lab_master_replicas: 1
    lab_mac_base: 'be:be:ca:fe:03:'
    lab_node_disk_data: 1
    lab_node_network_base: '192.168.125.'
    lab_node_role: 'node'
    lab_hosts:
      - {'id': '31', 'iface':'enp1s0'}
    libvirt_image_dir: '/home/libvirt-ocp'

  environment:
    PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin'

  roles:
    - 'lab'

  tasks:
    - name: 'Copy configuration files to deploy directory'
      ansible.builtin.copy:
        src: "{{ lab_path }}/{{ lab_name }}/config/{{ item }}"
        dest: "{{ lab_path }}/{{ lab_name }}/deploy/{{ item }}"
        remote_src: true
      loop:
        - 'install-config.yaml'
        - 'agent-config.yaml'

    - name: 'Generate cluster manifests'
      ansible.builtin.command:
        cmd: >
          openshift-install agent create cluster-manifests
          --dir {{ lab_path }}/{{ lab_name }}/deploy
        creates: "{{ lab_path }}/{{ lab_name }}/deploy/.openshift_install_state.json"

    - name: 'Generate bootstrap ISO image'
      ansible.builtin.command:
        cmd: >
          openshift-install agent create image
          --dir {{ lab_path }}/{{ lab_name }}/deploy
        creates: "{{ lab_path }}/{{ lab_name }}/deploy/agent.x86_64.iso"

    - name: 'Copy ISO image to libvirt image directory'
      ansible.builtin.copy:
        src: "{{ lab_path }}/{{ lab_name }}/deploy/agent.x86_64.iso"
        dest: "{{ libvirt_image_dir }}/{{ lab_name }}-agent-installer.iso"
        remote_src: true

    - name: 'Change CD-ROM source to ABI iso image'
      ansible.builtin.command:
        cmd: >
          virsh change-media --current
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
          hdc
          {{ libvirt_image_dir }}/{{ lab_name }}-agent-installer.iso
      loop: "{{ lab_hosts }}"
      loop_control:
        extended: true

    - name: 'Start VMs'
      ansible.builtin.command:
        cmd: >
          virsh start
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
      loop: "{{ lab_hosts }}"
      loop_control:
        extended: true
      when: start_install | default(False)

    - name: 'Wait for kubeconfig file'
      ansible.builtin.wait_for:
        path: "{{ lab_path }}/{{ lab_name }}/deploy/auth/kubeconfig"
        state: 'present'
      when: start_install | default(False)

    - name: 'Waiting until the installation finishes'
      ansible.builtin.command:
        cmd: >
          oc get clusterversion -o jsonpath='{.items[*].status.conditions[?(@.type=="Available")].status}'
      register: install_status
      environment:
        KUBECONFIG: "{{ lab_path }}/{{ lab_name }}/deploy/auth/kubeconfig"
        PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin'
      retries: 125
      delay: 30
      until: install_status.stdout == 'True'
      changed_when: False
      when: start_install | default(False)
