---
- name: 'Install a new lab using the Appliance Bundle tool'
  hosts:
    - 'lab'

  gather_facts: false

  vars:
    lab_appliance: True
    ocp_appliance_cfg_dir: "{{ lab_path }}/{{ lab_name }}/config"
    ocp_appliance_cwd: "{{ lab_path }}/{{ lab_name }}/deploy"
    lab_mac_base: 'be:be:ca:fe:03:'
    lab_node_disk_sys: 150
    lab_node_disk_data: 1
    lab_node_network_base: '192.168.125.'
    lab_node_role: 'node'
    lab_path: '/home/ocp-labs'
    lab_pull_secret_install: '{"auths":{"":{"auth":"dXNlcjpwYXNz"}}}'
    libvirt_image_dir: '/home/libvirt-ocp'

    lab_name: 'appliance'
    lab_hosts: []
    lab_abi_ip: ""
    lab_api_ips: []
    lab_ingress_ips: []

  environment:
    PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin'

  roles:
    - 'lab'

  tasks:
    - name: 'Execute base handlers'
      ansible.builtin.meta: flush_handlers

    - name: 'Check CD-ROM devices'
      ansible.builtin.shell:
        cmd: >
          virsh domblklist
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
          | grep -s hdc
      register: __appliance_vm_cd
      changed_when: false
      failed_when: false
      loop: "{{ lab_hosts }}"
      loop_control:
        extended: true

    - name: 'Prepare vm_cdrom_status'
      block:
        - name: 'Create vm_cdrom_status fact'
          ansible.builtin.set_fact:
            vm_cdrom_status: []
        - name: 'Fill in vm_cdrom_status'
          ansible.builtin.set_fact:
            vm_cdrom_status: "{{
              vm_cdrom_status + [{
                'name': '{}-{}-{}'.format(lab_name, item.role | default(lab_node_role), ansible_loop.index),
                'cdrom': __appliance_vm_cd.results[ansible_loop.index0].rc }] }}"
          loop: "{{ lab_hosts }}"
          loop_control:
            extended: true

    - name: 'Remove CD-ROM on VMs'
      ansible.builtin.command:
        cmd: "virsh detach-disk {{ item.name }} hdc --config"
      when: item.cdrom == 0
      loop: "{{ vm_cdrom_status }}"

    - name: 'Copy configuration files to deploy directory'
      ansible.builtin.copy:
        src: "{{ ocp_appliance_cfg_dir }}/appliance-config.yaml"
        dest: "{{ ocp_appliance_cwd }}/appliance-config.yaml"
        remote_src: true
      register: __appliance_cfg
      ignore_errors: "{{ ansible_check_mode }}"
      notify:
        - 'bundle build'

    - name: 'Copy configuration files to deploy directory'
      ansible.builtin.copy:
        src: "{{ ocp_appliance_cfg_dir }}/{{ item }}"
        dest: "{{ ocp_appliance_cwd }}/{{ item }}"
        remote_src: true
      register: __agent_cfg
      ignore_errors: "{{ ansible_check_mode }}"
      loop:
        - 'install-config.yaml'
        - 'agent-config.yaml'
      notify:
        - 'agent build'

    - name: 'Run appliance commands'
      ansible.builtin.include_role:
        name: 'ocp_appliance'
        tasks_from: 'commands.yaml'
      vars:
        ocp_appliance_cmd_clean: "{{ __appliance_cfg.changed }}"
        ocp_appliance_cmd_build: "{{ __appliance_cfg.changed }}"

  handlers:
    # This task is too slow, it must be reviewed
    # - name: 'Copy appliance disk to libvirt storage directory'
    #   ansible.posix.synchronize:
    #     src: "{{ lab_path }}/{{ lab_name }}/deploy/appliance.raw"
    #     dest: "{{ libvirt_image_dir }}/{{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}.raw"
    #   delegate_to: "{{ inventory_hostname }}"
    #   loop: "{{ lab_hosts }}"
    #   loop_control:
    #     extended: true
    #   listen:
    #     - 'bundle build'

    - name: 'Copy appliance disk to libvirt storage directory'
      ansible.builtin.command:
        cmd: >
          cp -f {{ ocp_appliance_cwd }}/appliance.raw
          {{ libvirt_image_dir }}/{{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}.raw
      loop: "{{ lab_hosts }}"
      loop_control:
        extended: true
      listen:
        - 'bundle build'

    - name: 'Remove old agent-config files'
      ansible.builtin.file:
        path: "{{ ocp_appliance_cwd }}/{{ item }}"
        state: 'absent'
      loop:
        - "agentconfig.noarch.iso"
        - "auth"
      listen:
        - 'agent build'

    - name: 'Get Openshift cache version'
      ansible.builtin.shell:
        cmd: >
          grep -Eo 'cache/[^/]+' temp/scripts/guestfish/guestfish.sh | uniq
        chdir: "{{ ocp_appliance_cwd }}"
      register: __appliance_ocp_version
      listen:
        - 'agent build'

    - name: 'Generate bootstrap ISO image'
      ansible.builtin.command:
        cmd: >
          {{ ocp_appliance_cwd }}/{{ __appliance_ocp_version.stdout }}/openshift-install
            agent create config-image
            --dir {{ ocp_appliance_cwd }}
      listen:
        - 'agent build'

    - name: 'Copy ISO image to libvirt image directory'
      ansible.builtin.copy:
        src: "{{ ocp_appliance_cwd }}/agentconfig.noarch.iso"
        dest: "{{ libvirt_image_dir }}/{{ lab_name }}-agentconfig.iso"
        remote_src: true
      listen:
        - 'agent build'

    - name: 'Check appliance disk devices'
      ansible.builtin.shell:
        cmd: >
          virsh domblklist
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
          | grep -s sda
      register: __appliance_vm_sda
      changed_when: false
      failed_when: false
      loop: "{{ lab_hosts }}"
      loop_control:
        extended: true
      listen:
        - 'bundle build'

    - name: 'Attach appliance disk'
      ansible.builtin.command:
        cmd: >
          virsh attach-disk
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
          {{ libvirt_image_dir }}/{{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}.raw
          sda --persistent
      when: item.rc == 1
      loop: "{{ __appliance_vm_sda.results }}"
      loop_control:
        extended: true
      listen:
        - 'bundle build'

    - name: 'Check agent-config disk devices'
      ansible.builtin.shell:
        cmd: >
          virsh domblklist
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
          | grep -s sdb
      register: __appliance_vm_sdb
      changed_when: false
      failed_when: false
      loop: "{{ lab_hosts }}"
      loop_control:
        extended: true
      listen:
        - 'agent build'

    - name: 'Attach agent-config disk'
      ansible.builtin.command:
        cmd: >
          virsh attach-disk
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
          {{ libvirt_image_dir }}/{{ lab_name }}-agentconfig.iso
          sdb --persistent --mode readonly --targetbus usb
      when: item.rc == 1
      loop: "{{ __appliance_vm_sdb.results }}"
      loop_control:
        extended: true
      listen:
        - 'agent build'

    - name: 'Start VMs'
      ansible.builtin.command:
        cmd: >
          virsh start
          {{ lab_name }}-{{ item.role | default(lab_node_role) }}-{{ ansible_loop.index }}
      loop: "{{ lab_hosts }}"
      loop_control:
        extended: true
      listen:
        - 'bundle build'
        - 'agent build'
      when: start_install | default(False)

    - name: 'Wait for kubeconfig file'
      ansible.builtin.wait_for:
        path: "{{ ocp_appliance_cwd }}/auth/kubeconfig"
        state: 'present'
      listen:
        - 'bundle build'
        - 'agent build'
      when: start_install | default(False)

    - name: 'Waiting until the installation finishes'
      ansible.builtin.command:
        cmd: >
          oc get clusterversion -o jsonpath='{.items[*].status.conditions[?(@.type=="Available")].status}'
      register: install_status
      environment:
        KUBECONFIG: "{{ ocp_appliance_cwd }}/auth/kubeconfig"
        PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin'
      retries: 150
      delay: 30
      until: install_status.stdout == 'True'
      changed_when: False
      listen:
        - 'bundle build'
        - 'agent build'
      when: start_install | default(False)
